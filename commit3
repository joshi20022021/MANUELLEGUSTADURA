.global abrirArchivo
.global cerrarArchivo
.global leerCSV
.global convertirAEntero
.global enteroACadena
.global ordenamientoBurbuja
.global ordenamientoInsercion
.global convertirArregloACadena
.global _start

.data
salto:
    .asciz "\n"
    lenSalto = .- salto

espacio:
    .asciz " "
    lenEspacio = .- espacio

limpiar_pantalla:
    .asciz "\x1B[2J\x1B[H"
    lenLimpiarPantalla = .- limpiar_pantalla

mensajeNombreArchivo:
    .asciz "Ingrese el nombre del archivo: "
    lenMensajeNombreArchivo = .- mensajeNombreArchivo

errorAbrirArchivo:
    .asciz "Error al abrir el archivo\n"
    lenErrorAbrirArchivo = .- errorAbrirArchivo

lecturaExitosa:
    .asciz "El Archivo Se Ha Leído Correctamente\n"
    lenLecturaExitosa = .- lecturaExitosa

conjunto_inicial:
    .asciz "Conjunto inicial: "
    lenConjuntoInicial = .- conjunto_inicial

mensajePaso:
    .asciz "Paso "
    lenMensajePaso = .- mensajePaso

dos_puntos:
    .asciz ": "
    lenDosPuntos = .- dos_puntos

ordenamiento_completado:
    .asciz "Ordenamiento completado.\n"
    lenOrdenamientoCompletado = .- ordenamiento_completado

mensajeOrden:
    .asciz "Seleccione el orden de ordenamiento:\n1. Ascendente\n2. Descendente\nIngrese su opción: "
    lenMensajeOrden = .- mensajeOrden

opcionInvalida:
    .asciz "Opción inválida. Se ordenará en orden ascendente por defecto.\n"
    lenOpcionInvalida = .- opcionInvalida

cabecera:
    .asciz "Universidad de San Carlos de Guatemala\n"
    .asciz "Facultad de Ingeniería\n"
    .asciz "Escuela de Ciencias y Sistemas\n"
    .asciz "Arquitectura de Computadores y Ensambladores 1\n"
    .asciz "Sección A\n"
    .asciz "Nombre: Edgar Josias Can Ajquejay\n"
    .asciz "Carnet: 202112012\n"
    .asciz "Presione Enter para continuar...\n"
lenCabecera = .- cabecera

menuPrincipal:
    .asciz "-------------------------------\n"
    .asciz "||       Menú Principal      ||\n"
    .asciz "||1. Ingreso de lista de números ||\n"
    .asciz "||2. Ordenamiento Burbuja    ||\n"
    .asciz "||3. Ordenamiento Inserción  ||\n"
    .asciz "||4. Ordenamiento Mezcla     ||\n"
    .asciz "||5. Finalizar programa      ||\n"
    .asciz "-------------------------------\n"
    .asciz "||>> Ingrese Una Opción:     ||\n"
lenMenuPrincipal = .- menuPrincipal

submenu_ingreso_texto:
    .asciz "-------------------------------\n"
    .asciz "|| Ingreso de lista de números ||\n"
    .asciz "||1. De forma manual           ||\n"
    .asciz "||2. Carga de Archivo CSV      ||\n"
    .asciz "||3. Regresar al menú anterior ||\n"
    .asciz "-------------------------------\n"
    .asciz "||>> Ingrese Una Opción:       ||\n"
lenSubmenuIngreso = .- submenu_ingreso_texto

sinDatosMensaje:
    .asciz "No hay datos para ordenar. Por favor, ingrese datos primero.\n"
    lenSinDatosMensaje = .- sinDatosMensaje

noImplementadoMensaje:
    .asciz "Opción no implementada aún\n"
    lenNoImplementadoMensaje = .- noImplementadoMensaje

.bss
opcion:
    .space 2

nombreArchivo:
    .zero 50

contador:
    .zero 8

numero:
    .space 4

caracter:
    .byte 0

descriptorArchivo:
    .space 8

opcionOrdenamiento:
    .space 2   // Espacio para almacenar la opción de ordenamiento ('1' o '2')

arreglo:
    .space 400
.text

// Macro para imprimir cadenas de texto
.macro imprimir reg, len
    MOV x0, 1
    LDR x1, =\reg
    MOV x2, \len
    MOV x8, 64
    SVC 0
.endm

// Macro para leer datos del usuario
.macro leer entrada, buffer, len
    MOV x0, \entrada
    LDR x1, =\buffer
    MOV x2, \len
    MOV x8, 63
    SVC 0
.endm

abrirArchivo:
    // parámetro: x1 -> nombreArchivo
    MOV x0, -100
    MOV x2, 0
    MOV x8, 56
    SVC 0

    CMP x0, 0
    BLE error_abrir_archivo
    LDR x9, =descriptorArchivo
    STR x0, [x9]
    B fin_abrir_archivo

    error_abrir_archivo:
        imprimir errorAbrirArchivo, lenErrorAbrirArchivo
        leer 0, opcion, 1

    fin_abrir_archivo:
        RET

cerrarArchivo:
    LDR x0, =descriptorArchivo
    LDR x0, [x0]
    MOV x8, 57
    SVC 0
    RET

leerCSV:
    // código para leer número y convertir
    LDR x10, =numero    // Buffer para almacenar el número
    LDR x11, =descriptorArchivo
    LDR x11, [x11]

    leer_numero:
        leer x11, caracter, 1
        LDR x4, =caracter
        LDRB w3, [x4]
        CMP w3, 44
        BEQ convertir_numero

        MOV x20, x0
        CBZ x0, convertir_numero

        STRB w3, [x10], 1
        B leer_numero

    convertir_numero:
        LDR x5, =numero
        LDR x8, =numero
        LDR x12, =arreglo

        STP x29, x30, [SP, -16]!

        BL convertirAEntero

        LDP x29, x30, [SP], 16

        LDR x12, =numero
        MOV w13, 0
        MOV x14, 0

        limpiar_numero:
            STRB w13, [x12], 1
            ADD x14, x14, 1
            CMP x14, 3
            BNE limpiar_numero
            LDR x10, =numero
            CBNZ x20, leer_numero

    fin_leer:
        imprimir salto, lenSalto
        imprimir lecturaExitosa, lenLecturaExitosa
        leer 0, opcion, 2
        RET

convertirAEntero:
    // parámetros: x5, x8 => dirección del buffer, x12 => dirección del resultado
    SUB x5, x5, 1
    MOV x15, 0    // Bandera para número negativo
convertir_digitos:
    LDRB w7, [x8], 1
    CMP w7, '-'
    BEQ establecer_negativo
    CBZ w7, convertir_a_entero
    CMP w7, 10
    BEQ convertir_a_entero
    B convertir_digitos

establecer_negativo:
    MOV x15, 1
    B convertir_digitos

convertir_a_entero:
    SUB x8, x8, 2
    MOV x4, 1
    MOV x9, 0
    MOV w6, #10     // Asegúrese de que w6 contenga 10 antes de usar

bucle_conversion:
    LDRB w7, [x8], -1
    CMP w7, '-'
    BEQ fin_conversion

    SUB w7, w7, 48
    MUL w7, w7, w4
    ADD w9, w9, w7

    MUL w4, w4, w6

    CMP x8, x5
    BNE bucle_conversion

fin_conversion:
    CMP x15, 1
    BNE almacenar_entero
    NEG w9, w9

almacenar_entero:
    LDR x13, =contador
    LDR x13, [x13] // Saltos
    MOV x14, 4
    MUL x14, x13, x14

    STR w9, [x12, x14] // usando 32 bits

    ADD x13, x13, 1
    LDR x12, =contador
    STR x13, [x12]

    RET

enteroACadena:
    // Prólogo
    STP x29, x30, [SP, -16]!
    MOV x29, SP

    // parámetros: x0 => número, x1 => dirección del buffer
    MOV x10, 0          // Conteo de dígitos
    MOV x12, 0          // Bandera para signo negativo
    MOV w2, #10000      // Divisor base
    CMP w0, 0
    BGT convertir_ascii
    BEQ convertir_cero

    B convertir_negativo

convertir_cero:
    MOV w5, #'0'
    STRB w5, [x1], #1
    MOV x10, 1
    B fin_conversion_ascii

convertir_negativo:
    MOV x12, 1          // Bandera de signo negativo
    MOV w5, #'-'
    STRB w5, [x1], #1
    NEG w0, w0
    ADD x10, x10, 1

convertir_ascii:
    CMP w2, 0
    BEQ fin_conversion_ascii
    UDIV w3, w0, w2
    CBZ w3, reducir_base

    ADD w5, w3, #'0'    // Convertir dígito a ASCII
    STRB w5, [x1], #1
    ADD x10, x10, 1

    MUL w3, w3, w2
    SUB w0, w0, w3

reducir_base:
    MOV w6, #10         // Cargar 10 en w6
    UDIV w2, w2, w6
    CMP w2, 0
    BNE convertir_ascii

fin_conversion_ascii:
    MOV x0, x10         // Devolver conteo de dígitos en x0
    LDP x29, x30, [SP], #16
    RET

convertirArregloACadena:
    STP x29, x30, [SP, -16]!
    MOV x29, SP
    STP x19, x20, [SP, -16]!     // Guardar x19 y x20

    LDR x9, =contador
    LDR x9, [x9]                 // Longitud
    MOV x7, 0                    // Índice
    LDR x15, =arreglo

bucle_arreglo:
    LDR w0, [x15], #4           // Cargar número desde el arreglo
    LDR x1, =numero             // Buffer para el número convertido
    BL enteroACadena            // Convertir número a ASCII, longitud en x0

    // Imprimir número convertido
    MOV x2, x0                   // Longitud del número convertido
    imprimir numero, x2

    // Imprimir espacio
    imprimir espacio, lenEspacio

    ADD x7, x7, 1
    CMP x7, x9
    BNE bucle_arreglo

    // Imprimir nueva línea
    imprimir salto, lenSalto

    LDP x19, x20, [SP], #16       // Restaurar x19 y x20
    LDP x29, x30, [SP], #16       // Restaurar x29 y x30
    RET

ordenamientoBurbuja:
    STP x29, x30, [SP, -16]!     // Guardar frame pointer y link register
    MOV x29, SP
    STP x19, x20, [SP, -16]!     // Guardar x19 y x20
    STP x21, x22, [SP, -16]!     // Guardar x21 y x22

    // w2 contiene el orden de ordenamiento (1 para ascendente, 2 para descendente)
    LDR x0, =contador
    LDR x0, [x0]            // x0 = n (longitud del arreglo)
    SUB x19, x0, 1          // x19 = n - 1 (límite del bucle externo)

    MOV x20, 1              // x20 = número de paso

bucle_externo_burbuja:
    MOV x21, 0              // x21 = bandera de intercambio (0 = no hay intercambios)
    MOV x22, x19            // x22 = límite del bucle interno (comienza en n-1, disminuye cada pasada)

bucle_interno_burbuja:
    LDR x3, =arreglo
    MOV x9, 0               // x9 = j (índice del bucle interno)

bucle_comparar:
    LSL x10, x9, 2          // x10 = j * 4 (los elementos del arreglo son de 32 bits)
    LDR w4, [x3, x10]      // w4 = arreglo[j]

    ADD x11, x10, 4         // x11 = (j + 1) * 4
    LDR w5, [x3, x11]      // w5 = arreglo[j + 1]

    // Comparar e intercambiar si es necesario
    CMP w2, 1               // ¿El orden es ascendente?
    BEQ ordenar_ascendente
    CMP w2, 2               // ¿El orden es descendente?
    BEQ ordenar_descendente

    // Predeterminar a ascendente si la opción no es válida
    B ordenar_ascendente

ordenar_ascendente:
    CMP w4, w5
    BLE no_intercambiar     // Si arreglo[j] <= arreglo[j + 1], no intercambiar
    B realizar_intercambio

ordenar_descendente:
    CMP w4, w5
    BGE no_intercambiar     // Si arreglo[j] >= arreglo[j + 1], no intercambiar

realizar_intercambio:
    // Intercambiar arreglo[j] y arreglo[j + 1]
    STR w5, [x3, x10]      // arreglo[j] = arreglo[j + 1]
    STR w4, [x3, x11]      // arreglo[j + 1] = arreglo[j]
    MOV x21, 1              // Establecer bandera de intercambio a 1

no_intercambiar:
    ADD x9, x9, 1           // Incrementar índice del bucle interno j
    CMP x9, x22
    BLT bucle_comparar      // Continuar bucle interno si j < x22

    // Imprimir el arreglo después de cada pasada
    imprimir mensajePaso, lenMensajePaso

    // Convertir número de paso a ASCII e imprimir
    MOV x0, x20                  // x0 = número de paso
    LDR x1, =numero              // Buffer para el número convertido
    BL enteroACadena             // enteroACadena devuelve la longitud en x0

    // Imprimir número de paso
    MOV x2, x0                   // x2 = longitud del número convertido
    imprimir numero, x2

    // Imprimir ": "
    imprimir dos_puntos, lenDosPuntos

    // Imprimir el arreglo actual
    BL convertirArregloACadena

    // Incrementar número de paso
    ADD x20, x20, 1

    // Reducir límite del bucle interno
    SUB x22, x22, 1              // Reducir límite del bucle interno

    // Verificar si no hubo intercambios o si se realizaron todas las pasadas
    CBZ x21, fin_ordenamiento_burbuja    // Si no hubo intercambios, el arreglo está ordenado
    SUBS x19, x19, 1             // Reducir contador del bucle externo
    BGE bucle_externo_burbuja    // Si x19 >= 0, continuar bucle externo

fin_ordenamiento_burbuja:
    LDP x21, x22, [SP], 16       // Restaurar x21 y x22
    LDP x19, x20, [SP], 16       // Restaurar x19 y x20
    LDP x29, x30, [SP], 16       // Restaurar frame pointer y link register
    RET

_start:
    // Limpiar la pantalla del terminal
    imprimir limpiar_pantalla, lenLimpiarPantalla

    // Imprimir la cabecera
    imprimir cabecera, lenCabecera

    // Esperar Enter
    leer 0, opcion, 2

    B bucle_menu_principal
  
bucle_menu_principal:
    // Limpiar la pantalla
    imprimir limpiar_pantalla, lenLimpiarPantalla

    // Imprimir el menú principal
    imprimir menuPrincipal, lenMenuPrincipal

    // Leer opción del usuario
    leer 0, opcion, 2

    // Leer la opción del usuario de 'opcion'
    LDR x0, =opcion
    LDRB w1, [x0]

    // Verificar la opción
    CMP w1, '1'
    BEQ bucle_submenu_ingreso
    CMP w1, '2'
    BEQ opcion_ordenamiento_burbuja
    CMP w1, '3'
    BEQ opcion_ordenamiento_insercion
    CMP w1, '4'
    BEQ opcion_no_implementada
    CMP w1, '5'
    BEQ salir_programa   // Cambiado para finalizar el programa

    // Opción inválida, regresar al bucle
    B bucle_menu_principal 

bucle_submenu_ingreso:
bucle_ingreso_lista:
    // Limpiar la pantalla
    imprimir limpiar_pantalla, lenLimpiarPantalla

    // Imprimir el submenu
    imprimir submenu_ingreso_texto, lenSubmenuIngreso

    // Leer opción del usuario
    leer 0, opcion, 2

    // Leer la opción del usuario de 'opcion'
    LDR x0, =opcion
    LDRB w1, [x0]

    // Verificar la opción
    CMP w1, '1'
    BEQ opcion_no_implementada
    CMP w1, '2'
    BEQ opcion_cargar_csv
    CMP w1, '3'
    BEQ bucle_menu_principal

    // Opción inválida, regresar al bucle
    B bucle_ingreso_lista

opcion_cargar_csv:
    // Limpiar la pantalla
    imprimir limpiar_pantalla, lenLimpiarPantalla

    // Reiniciar contador a cero
    LDR x0, =contador
    MOV x1, 0
    STR x1, [x0]

    // Solicitar el nombre del archivo
    imprimir mensajeNombreArchivo, lenMensajeNombreArchivo
    leer 0, nombreArchivo, 50

    // Terminar el nombre del archivo con nulo
    LDR x0, =nombreArchivo

bucle_nombre_archivo_csv:
    LDRB w1, [x0], 1
    CMP w1, 10
    BEQ fin_bucle_nombre_archivo_csv
    B bucle_nombre_archivo_csv

fin_bucle_nombre_archivo_csv:
    MOV w1, 0
    STRB w1, [x0, -1]!

    // Abrir el archivo
    LDR x1, =nombreArchivo
    BL abrirArchivo

    // Leer números desde el archivo CSV
    BL leerCSV

    // Cerrar el archivo
    BL cerrarArchivo

    // Imprimir el arreglo inicial
    imprimir conjunto_inicial, lenConjuntoInicial
    BL convertirArregloACadena

    // Esperar entrada del usuario antes de regresar al submenu
    leer 0, opcion, 2

    // Regresar al submenu
    B bucle_ingreso_lista

opcion_ordenamiento_burbuja:
    // Verificar si el arreglo tiene datos
    LDR x0, =contador
    LDR x1, [x0]
    CBZ x1, arreglo_vacio

    // Imprimir el arreglo inicial
    imprimir conjunto_inicial, lenConjuntoInicial
    BL convertirArregloACadena

    // Preguntar por el orden de ordenamiento
    B solicitar_orden_ordenamiento

opcion_ordenamiento_insercion:
    // Verificar si el arreglo tiene datos
    LDR x0, =contador
    LDR x1, [x0]
    CBZ x1, arreglo_vacio

    // Imprimir el arreglo inicial
    imprimir conjunto_inicial, lenConjuntoInicial
    BL convertirArregloACadena

    // Preguntar por el orden de ordenamiento
    B solicitar_orden_ordenamiento_insercion

solicitar_orden_ordenamiento_insercion:
    imprimir mensajeOrden, lenMensajeOrden
    leer 0, opcionOrdenamiento, 2

    // Leer la opción del usuario
    LDR x0, =opcionOrdenamiento
    LDRB w1, [x0]

    // Verificar si la opción es '1' o '2'
    CMP w1, '1'
    BEQ establecer_ascendente_insercion
    CMP w1, '2'
    BEQ establecer_descendente_insercion

    // Opción inválida, predeterminar a ascendente
    imprimir opcionInvalida, lenOpcionInvalida
    MOV w2, 1  // Orden ascendente predeterminado
    B iniciar_ordenamiento_insercion

establecer_ascendente_insercion:
    MOV w2, 1  // Orden ascendente
    B iniciar_ordenamiento_insercion

establecer_descendente_insercion:
    MOV w2, 2  // Orden descendente

iniciar_ordenamiento_insercion:
    // Iniciar el ordenamiento por inserción con el orden seleccionado
    BL ordenamientoInsercion

    // Imprimir mensaje de finalización
    imprimir ordenamiento_completado, lenOrdenamientoCompletado

    // Esperar entrada del usuario antes de regresar al menú principal
    leer 0, opcion, 2

    // Regresar al menú principal
    B bucle_menu_principal

ordenamientoInsercion:
    STP x29, x30, [SP, -16]!  // Guardar frame pointer y link register
    MOV x29, SP
    STP x19, x20, [SP, -16]!  // Guardar x19 y x20
    STP x21, x22, [SP, -16]!  // Guardar x21 y x22

    LDR x19, =contador        // Cargar la dirección del contador
    LDR w19, [x19]            // w19 = n (número de elementos en el arreglo)
    CMP w19, 1                // Si hay menos de 2 elementos, no es necesario ordenar
    BLE fin_ordenamiento_insercion

    LDR x20, =arreglo         // x20 apunta al inicio del arreglo
    MOV w21, 1                // w21 = índice del elemento actual (comienza en 1)
    MOV w22, w2               // w22 = orden de ordenamiento (1 ascendente, 2 descendente)

bucle_ordenamiento_insercion:
    LSL x0, x21, 2            // x0 = w21 * 4 (índice convertido en bytes)
    LDR w1, [x20, x0]         // w1 = arreglo[w21] (elemento a insertar)
    SUB w2, w21, 1            // w2 = índice del elemento anterior (w21 - 1)

insercion_bucle:
    CMP w2, 0                 // Verificar si w2 es válido
    BLT insertar_elemento     // Si w2 < 0, insertar el elemento

    LSL x3, x2, 2             // x3 = w2 * 4 (índice convertido en bytes)
    LDR w4, [x20, x3]         // w4 = arreglo[w2] (elemento anterior)

    // Comparar el elemento actual con el elemento anterior
    CMP w22, 1                // Verificar si el orden es ascendente
    BEQ ordenar_ascendente_insercion

    // Orden descendente
    CMP w4, w1
    BGE insertar_elemento
    B mover_elemento

ordenar_ascendente_insercion:
    CMP w4, w1
    BLE insertar_elemento     // Si arreglo[w2] <= w1, insertar el elemento

mover_elemento:
    // Mover arreglo[w2] a la posición [w2 + 1]
    ADD x5, x3, 4             // x5 apunta a arreglo[w2 + 1]
    STR w4, [x20, x5]         // arreglo[w2 + 1] = arreglo[w2]

    // Decrementar el índice para comparar con el elemento anterior
    SUB w2, w2, 1
    B insercion_bucle


insertar_elemento:
    // Insertar el elemento en la posición correcta
    ADD w2, w2, 1
    LSL x3, x2, 2             // Convertir el índice a bytes
    STR w1, [x20, x3]         // arreglo[w2] = w1

    // Imprimir el paso actual del arreglo
    imprimir mensajePaso, lenMensajePaso
    MOV x0, x21               // x0 = número de paso
    LDR x1, =numero           // Buffer para el número convertido
    BL enteroACadena          // Convertir número a ASCII
    MOV x2, x0                // Longitud del número convertido
    imprimir numero, x2
    imprimir dos_puntos, lenDosPuntos
    BL convertirArregloACadena

    // Incrementar el índice para el siguiente elemento
    ADD w21, w21, 1
    CMP w21, w19
    BLT bucle_ordenamiento_insercion // Continuar el bucle si w21 < n

fin_ordenamiento_insercion:
    LDP x21, x22, [SP], 16    // Restaurar x21 y x22
    LDP x19, x20, [SP], 16    // Restaurar x19 y x20
    LDP x29, x30, [SP], 16    // Restaurar frame pointer y link register
    RET

arreglo_vacio:
    // El arreglo está vacío, informar al usuario
    imprimir salto, lenSalto
    imprimir sinDatosMensaje, lenSinDatosMensaje
    // Esperar entrada del usuario antes de regresar al menú principal
    leer 0, opcion, 2

    // Regresar al menú principal
    B bucle_menu_principal

opcion_no_implementada:
    imprimir salto, lenSalto
    imprimir noImplementadoMensaje, lenNoImplementadoMensaje
    // Esperar entrada del usuario antes de regresar al menú principal
    leer 0, opcion, 2
    B bucle_menu_principal

solicitar_orden_ordenamiento:
    imprimir mensajeOrden, lenMensajeOrden
    leer 0, opcionOrdenamiento, 2

    // Leer la opción del usuario
    LDR x0, =opcionOrdenamiento
    LDRB w1, [x0]

    // Verificar si la opción es '1' o '2'
    CMP w1, '1'
    BEQ establecer_ascendente
    CMP w1, '2'
    BEQ establecer_descendente

    // Opción inválida, predeterminar a ascendente
    imprimir opcionInvalida, lenOpcionInvalida
    MOV w2, 1  // Orden ascendente predeterminado
    B iniciar_ordenamiento

establecer_ascendente:
    MOV w2, 1  // Orden ascendente
    B iniciar_ordenamiento

establecer_descendente:
    MOV w2, 2  // Orden descendente

iniciar_ordenamiento:
    // Iniciar el ordenamiento burbuja con el orden seleccionado
    BL ordenamientoBurbuja

    // Imprimir mensaje de finalización
    imprimir ordenamiento_completado, lenOrdenamientoCompletado

    // Esperar entrada del usuario antes de regresar al menú principal
    leer 0, opcion, 2

    // Regresar al menú principal
    B bucle_menu_principal

// Modificar la etiqueta 'salir' para que vuelva al menú principal en lugar de salir
salir:
    B bucle_menu_principal

// Agregar una nueva etiqueta para salir del programa
salir_programa:
    MOV x0, 0
    MOV x8, 93
    SVC 0
